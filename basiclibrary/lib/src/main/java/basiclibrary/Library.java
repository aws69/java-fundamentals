/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;
import java.util.*;


public class Library {
    public static ArrayList<Integer> roll(int n) {
        if (n <= 0) {
            return new ArrayList<>();
        }

        ArrayList<Integer> rolls = new ArrayList<>();
        Random random = new Random();

        for (int i = 0; i < n; i++) {
            int rollValue = random.nextInt(6) + 1;
            rolls.add(rollValue);
        }

        return rolls;
    }

    public static boolean containsDuplicates(int[] arr) {
        ArrayList<Integer> list = new ArrayList<>();
        for (int num : arr) {
            if (list.contains(num)) {
                return true;
            }
            list.add(num);
        }
        return false;
    }

    public static double calculateAverage(int[] arr) {
        if (arr == null) {
            return 0;
        }

        int sum = 0;
        for (int num : arr) {
            sum += num;
        }

        return (double) sum / arr.length ;
    }


    public static int[] arrayOfArrays(int[][] arrays) {
        if (arrays == null || arrays.length == 0) {
            return null;
        }

        int lowestAverage = Integer.MAX_VALUE;
        int lowestIndex = -1;

        for (int i = 0; i < arrays.length; i++) {
            int sum = 0;
            HashSet<Integer> uniqueValues = new HashSet<>();

            for (int num : arrays[i]) {
                sum += num;
                uniqueValues.add(num);
            }

            int average = sum / uniqueValues.size();
            if (average < lowestAverage) {
                lowestAverage = average;
                lowestIndex = i;
            }
        }

        return arrays[lowestIndex];
    }

    public static String analyzeWeatherData(int[][] temperatures) {
        int minTemp = Integer.MAX_VALUE;
        int maxTemp = Integer.MIN_VALUE;
        HashSet<Integer> uniqueTemps = new HashSet<>();

        // find min and max values and collect unique temperatures
        for (int[] weekTemps : temperatures) {
            for (int temp : weekTemps) {
                uniqueTemps.add(temp);
                minTemp = Math.min(minTemp, temp);
                maxTemp = Math.max(maxTemp, temp);
            }
        }

        // create a String for missing temperatures
        StringBuilder missingTemps = new StringBuilder();
        for (int temp = minTemp; temp <= maxTemp; temp++) {
            if (!uniqueTemps.contains(temp)) {
                missingTemps.append("Never saw temperature: ").append(temp).append("\n");
            }
        }

        // final result String

        return "High: " + maxTemp + "\n" +
                "Low: " + minTemp + "\n" +
                missingTemps;
    }

    public static String tally(List<String> votes) {
        Set<String> candidates = new HashSet<>();
        Map<String, Integer> voteCounts = new HashMap<>();

        for (String vote : votes) {
            candidates.add(vote);
            voteCounts.put(vote, voteCounts.getOrDefault(vote, 0) + 1);
        }

        int maxVotes = 0;
        String winner = "";

        for (String candidate : candidates) {
            int votesForCandidate = voteCounts.get(candidate);
            if (votesForCandidate > maxVotes) {
                maxVotes = votesForCandidate;
                winner = candidate;
            }
        }

        return winner;
    }
}
